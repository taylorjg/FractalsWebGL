{"version":3,"sources":["webpack://fractalswebgl/./src/service-worker.js"],"names":["webpackManifest","self","__WB_MANIFEST","console","log","JSON","stringify","webpackManifestUrls","map","url","cdnUrls","CURRENT_CACHE_NAME","URLS_TO_CACHE","addEventListener","async","caches","open","addAll","keys","promises","key","delete","Promise","all","event","respondWith","match","request","then","response","fetch"],"mappings":"yBAEM,EAAkB,kYAAK,cAC7B,QAAQ,IAAI,mBAAoB,qBAAqB,KAAK,UAAU,EAAiB,KAAM,MAE3F,MAAM,EAAsB,EAAgB,KAAI,EAAG,SAAU,IAAI,MACjE,QAAQ,IAAI,mBAAoB,yBAAyB,KAAK,UAAU,EAAqB,KAAM,MAEnG,MAAM,EAAU,CACd,mFACA,mFACA,iFACA,gEACA,iFACA,0EAEF,QAAQ,IAAI,mBAAoB,aAAa,KAAK,UAAU,EAAS,KAAM,MAE3E,MACM,EAAqB,gBACrB,EAAgB,IACjB,KACA,GAGL,KAAK,iBAAiB,WAAW,UAC/B,QAAQ,IAAI,mCACQ,OAAO,KAAK,IAC1B,OAAO,EAAa,IAG5B,KAAK,iBAAiB,YAAY,UAChC,QAAQ,IAAI,6BACZ,MAAM,QAAa,OAAO,OAC1B,QAAQ,IAAI,yCAAyC,KAAK,UAAU,MACpE,MAAM,EAAW,EAAK,KAAI,IACxB,GAAI,GAAO,EAET,OADA,QAAQ,IAAI,gDAAgD,KACrD,OAAO,OAAO,EACvB,IAEF,OAAO,QAAQ,IAAI,EAAQ,IAG7B,KAAK,iBAAiB,SAAS,GAC7B,EAAM,YACJ,OAAO,MAAM,EAAM,SAChB,MAAK,GAAY,GAAsB,MAAM,EAAM","file":"service-worker.js","sourceRoot":"","sourcesContent":["import packageJson from \"../package.json\"\n\nconst webpackManifest = self.__WB_MANIFEST\nconsole.log(\"[service worker]\", `webpackManifest:\\n${JSON.stringify(webpackManifest, null, 2)}`)\n\nconst webpackManifestUrls = webpackManifest.map(({ url }) => `/${url}`)\nconsole.log(\"[service worker]\", `webpackManifestUrls:\\n${JSON.stringify(webpackManifestUrls, null, 2)}`)\n\nconst cdnUrls = [\n  'https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css',\n  'https://cdnjs.cloudflare.com/ajax/libs/bootcards/1.1.2/css/bootcards-desktop.css',\n  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css',\n  'https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.js',\n  'https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.js',\n  'https://cdnjs.cloudflare.com/ajax/libs/bootcards/1.1.2/js/bootcards.js'\n]\nconsole.log(\"[service worker]\", `cdnUrls:\\n${JSON.stringify(cdnUrls, null, 2)}`)\n\nconst CURRENT_CACHE_VERSION = packageJson.version\nconst CURRENT_CACHE_NAME = `cache-v${CURRENT_CACHE_VERSION}`\nconst URLS_TO_CACHE = [\n  ...webpackManifestUrls,\n  ...cdnUrls\n]\n\nself.addEventListener('install', async () => {\n  console.log('[service worker install]')\n  const cache = await caches.open(CURRENT_CACHE_NAME)\n  cache.addAll(URLS_TO_CACHE)\n})\n\nself.addEventListener('activate', async () => {\n  console.log('[service worker activate]')\n  const keys = await caches.keys()\n  console.log(`[service worker activate] old caches: ${JSON.stringify(keys)}`)\n  const promises = keys.map(key => {\n    if (key != CURRENT_CACHE_NAME) {\n      console.log(`[service worker activate] deleting old cache ${key}`)\n      return caches.delete(key)\n    }\n  })\n  return Promise.all(promises)\n})\n\nself.addEventListener('fetch', event =>\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => response ? response : fetch(event.request))))\n"]}